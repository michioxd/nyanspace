# Generated by nyanspace, please do not edit, If you have an idea, please create a PR in https://github.com/michioxd/nyanspace/pulls
# License: https://github.com/michioxd/nyanspace/LICENSE


if ! [[ $1 =~ ^[0-9]+$ ]]; then
    echo "Error: Argument must be a number"
    exit 1
fi

while :
do
    # Initial JSON part
    json_output="{"

    # Get system hostname
    hostname=$(hostname)
    json_output+="\"hostname\": \"$hostname\","

    # Get Distro information
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        OS=$(lsb_release -si)
        VER=$(lsb_release -sr)
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    elif [ -f /etc/debian_version ]; then
        OS=Debian
        VER=$(cat /etc/debian_version)
    elif [ -f /etc/SuSE-release ]; then
        OS=$(cat /etc/SuSE-release | head -n 1 | awk '{print $1}')
        VER=$(cat /etc/SuSE-release | grep "VERSION" | awk '{print $3}')
    elif [ -f /etc/redhat-release ]; then
        OS=$(cat /etc/redhat-release | awk '{print $1}')
        VER=$(cat /etc/redhat-release | awk '{print $4}')
    else
        OS=$(uname -s)
        VER=$(uname -r)
    fi

    json_output+="\"distro_name\": \"$OS\","
    json_output+="\"distro_version\": \"$VER\","

    # Get kernel version
    kernel_version=$(awk '{print $3}' /proc/version)
    json_output+="\"kernel_version\": \"$kernel_version\","

    # Get cpu name
    cpu_name=$(grep -m1 'model name' /proc/cpuinfo | awk -F': ' '{print $2}')
    json_output+="\"cpu\": \"$cpu_name\","


    # Get cpu usage
    cpu_usage=$(cat <(grep 'cpu ' /proc/stat) <(sleep 1 && grep 'cpu ' /proc/stat) | awk -v RS="" '{print ($13-$2+$15-$4)*100/($13-$2+$15-$4+$16-$5)}')

    # Get memory details
    mem_total=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    mem_free=$(grep MemFree /proc/meminfo | awk '{print $2}')
    mem_buffers=$(grep Buffers /proc/meminfo | awk '{print $2}')
    mem_cached=$(grep "^Cached" /proc/meminfo | awk '{print $2}')
    mem_used=$((mem_total - mem_free - mem_buffers - mem_cached))

    json_output+="\"stats\": {\"cpu_usage\": $cpu_usage,\"mem_total\": $mem_total,\"mem_free\": $mem_free,\"mem_buffers\": $mem_buffers,\"mem_cached\": $mem_cached,\"mem_used\": $mem_used},"

    # Process partitions
    partitions=$(df -B1 | awk 'NR>1 {printf "{\"name\": \"%s\", \"total\": %d, \"used\": %d}", $1, $2, $3; if (NR < NR_OF_LINES) printf ","; else printf ""}' NR_OF_LINES=$(df -B1 | wc -l))
    json_output+="\"partitions\": [$partitions],"

    # Process temperatures, if applicable
    if [ -d "/sys/class/hwmon" ]; then
        temp_entries=()
        while read -r hwmon; do
            if [ -f "$hwmon/temp1_input" ]; then
                temperature=$(cat "$hwmon/temp1_input")
                temp_entries+=("$(printf '{"component": "%s", "temperature": %d}' "${hwmon##*/}" "$((temperature / 1000))")")
            fi
        done < <(ls -d /sys/class/hwmon/hwmon*)
        if [ ${#temp_entries[@]} -gt 0 ]; then
            IFS=','; temperatures="${temp_entries[*]}"
            json_output+="\"temperatures\": [$temperatures]"
        fi
    fi

    json_output+="}"

    echo "|__BEGIN_NYANSPACE_SERVER_CONTENT__|$json_output|__END_NYANSPACE_SERVER_CONTENT__|"

    sleep "$1"

done